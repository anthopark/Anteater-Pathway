# -*- coding: utf-8 -*-
"""cataloguescrapper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lcV-UNCiizqlKfvPPNRDrrflzUoGKuQ0
"""

class CatalogueScraper:
  def scrap_course_items(self, page_content: str) -> [dict]:
    soup = BeautifulSoup(page_content)
    courses = soup.find('div', attrs = {'class':'courses'})

    courseInfo = []

    for row in courses.findAll('div', attrs = {'class':'courseblock'}):
      x = row.p.strong.text
      splitText = x.split(". ")

      course_details = {}
      course_details['dept'] = splitText[0].replace('\xa0',' ').split(' ')[0]
      course_details['dept_code'] = splitText[0].replace('\xa0','')
      course_details['unit'] = splitText[2]
      course_details['desc'] = row.div.p.text

      try:
        nextSiblings = row.div.p.find_next_siblings("p")
      except:
        nextSiblibgs = ""

      for nextSibling in nextSiblings:
        if re.findall('\n', nextSibling.text) and 'Corequisite' in nextSibling.text:
          coreq = nextSibling.text.partition('\n')[0]
          course_details['coreq'] = coreq.partition(':')[2].replace('\xa0','').replace('\n','')
        elif 'corequisite' in nextSibling.text:
          course_details['coreq'] = nextSibling.text.partition(':')[2].replace('\xa0','').replace('\n','')
        elif nextSibling.text.startswith('Repeatability'):
          course_details['repeatability'] = nextSibling.text.partition(':')[2]
        elif nextSibling.text.startswith('('):
          roman = nextSibling.text
          roman = roman.replace("(","").replace(")","")
          if(re.search(r"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$",roman)):
            course_details['ge'] = roman
        elif nextSibling.text.startswith('Same'):
          course_details['sameas'] = nextSibling.text.partition('as')[2].replace('\xa0','').replace('\n','')
        elif nextSibling.text.startswith('Prerequisite'):
          course_details['prereq'] = nextSibling.text.partition(':')[2].replace('\xa0','').replace('\n','')
        elif nextSibling.text.startswith('Restriction'):
          course_details['restriction'] = nextSibling.text.partition(':')[2]
        elif nextSibling.text.startswith('Concurrent'):
          course_details['concurrent'] = nextSibling.text.partition('with')[2].replace('\xa0','')
      courseInfo.append(course_details)
    return courseInfo